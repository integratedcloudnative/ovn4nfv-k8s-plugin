// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/k8s/v1alpha1.Network":               schema_pkg_apis_k8s_v1alpha1_Network(ref),
		"./pkg/apis/k8s/v1alpha1.NetworkChaining":       schema_pkg_apis_k8s_v1alpha1_NetworkChaining(ref),
		"./pkg/apis/k8s/v1alpha1.NetworkChainingSpec":   schema_pkg_apis_k8s_v1alpha1_NetworkChainingSpec(ref),
		"./pkg/apis/k8s/v1alpha1.NetworkChainingStatus": schema_pkg_apis_k8s_v1alpha1_NetworkChainingStatus(ref),
		"./pkg/apis/k8s/v1alpha1.NetworkSpec":           schema_pkg_apis_k8s_v1alpha1_NetworkSpec(ref),
		"./pkg/apis/k8s/v1alpha1.NetworkStatus":         schema_pkg_apis_k8s_v1alpha1_NetworkStatus(ref),
		"./pkg/apis/k8s/v1alpha1.ProviderNetwork":       schema_pkg_apis_k8s_v1alpha1_ProviderNetwork(ref),
		"./pkg/apis/k8s/v1alpha1.ProviderNetworkSpec":   schema_pkg_apis_k8s_v1alpha1_ProviderNetworkSpec(ref),
		"./pkg/apis/k8s/v1alpha1.ProviderNetworkStatus": schema_pkg_apis_k8s_v1alpha1_ProviderNetworkStatus(ref),
	}
}

func schema_pkg_apis_k8s_v1alpha1_Network(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Network is the Schema for the networks API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.NetworkSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.NetworkStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.NetworkSpec", "./pkg/apis/k8s/v1alpha1.NetworkStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_NetworkChaining(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkChaining is the Schema for the networkchainings API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.NetworkChainingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.NetworkChainingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.NetworkChainingSpec", "./pkg/apis/k8s/v1alpha1.NetworkChainingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_NetworkChainingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkChainingSpec defines the desired state of NetworkChaining",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"chainType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routingSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "Currently only Routing type is supported",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.RouteSpec"),
						},
					},
				},
				Required: []string{"chainType", "routingSpec"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.RouteSpec"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_NetworkChainingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkChainingStatus defines the observed state of NetworkChaining",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"state"},
			},
		},
	}
}

func schema_pkg_apis_k8s_v1alpha1_NetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkSpec defines the desired state of Network",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cniType": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipv4Subnets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.IpSubnet"),
									},
								},
							},
						},
					},
					"ipv6Subnets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.IpSubnet"),
									},
								},
							},
						},
					},
					"dns": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.DnsSpec"),
						},
					},
					"routes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.Route"),
									},
								},
							},
						},
					},
				},
				Required: []string{"cniType", "ipv4Subnets"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.DnsSpec", "./pkg/apis/k8s/v1alpha1.IpSubnet", "./pkg/apis/k8s/v1alpha1.Route"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_NetworkStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkStatus defines the observed state of Network",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"state"},
			},
		},
	}
}

func schema_pkg_apis_k8s_v1alpha1_ProviderNetwork(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProviderNetwork is the Schema for the providernetworks API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.ProviderNetworkSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.ProviderNetworkStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.ProviderNetworkSpec", "./pkg/apis/k8s/v1alpha1.ProviderNetworkStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_ProviderNetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProviderNetworkSpec defines the desired state of ProviderNetwork",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cniType": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipv4Subnets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.IpSubnet"),
									},
								},
							},
						},
					},
					"ipv6Subnets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.IpSubnet"),
									},
								},
							},
						},
					},
					"dns": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.DnsSpec"),
						},
					},
					"routes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.Route"),
									},
								},
							},
						},
					},
					"providerNetType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vlan": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.VlanSpec"),
						},
					},
					"direct": {
						SchemaProps: spec.SchemaProps{
							Description: "For now VLAN is the only supported type",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.DirectSpec"),
						},
					},
				},
				Required: []string{"cniType", "ipv4Subnets", "providerNetType", "vlan", "direct"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.DirectSpec", "./pkg/apis/k8s/v1alpha1.DnsSpec", "./pkg/apis/k8s/v1alpha1.IpSubnet", "./pkg/apis/k8s/v1alpha1.Route", "./pkg/apis/k8s/v1alpha1.VlanSpec"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_ProviderNetworkStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProviderNetworkStatus defines the observed state of ProviderNetwork",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"state"},
			},
		},
	}
}
